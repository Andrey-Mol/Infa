#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <stdio.h>
#include<windows.h>
using namespace std;

int n; //кол-во учеников, считывание в main
char filename[] = "test.txt";
char filename_temp[] = "temp.txt";
int** mas_of_date = new int* [n];
bool zashita_ot_otsutstvia_familii;
char next_surname[255];

int getValue(string query)
{
	int value;
	cout << query;
	while (!(cin >> value))
	{
		cin.clear(); //Сбрасываем флаг ошибки, если таковая была
		cin.ignore(1000, '\n'); //Игнорируем оставшиеся в потоке данные
		cout << "Ошибка ввода, попробуйте снова: ";
	}
	return value;
}

float getValueF(string query)
{
	float value;
	cout << query;
	while (!(cin >> value) || value < 1)
	{
		cin.clear(); //Сбрасываем флаг ошибки, если таковая была
		cin.ignore(1000, '\n'); //Игнорируем оставшиеся в потоке данные
		cout << "Ошибка ввода, попробуйте снова: ";
	}
	return value;
}

struct Student
{
	char name[255], surname[255], surname2[255];
	int date[3];
	char address[255];
	float rating;
};
Student student2;
void proverka_dat()
{
	int h,g;
	for (int i = 0; i < n; i++)
	{
		h = 0;
		if (mas_of_date[i][3] == 0)
		{
			for (int j = i+1; j < n; j++)
			{
				g = 0;
				for (int t = 0; t < 3; t++)
				{
					if (mas_of_date[i][t] == mas_of_date[j][t])
					{
						g++;
					}
				}
				if (g == 3)
					h++;

			}
			if (h > 0)
			{
				mas_of_date[i][3] = 1;
				g = 0;
				for (int j = i+1; j < n; j++)
				{
					for (int t = 0; t < 3; t++)
					{
						if (mas_of_date[i][t] == mas_of_date[j][t])
						{
							g++;
						}
					}
					if (g == 3)
						mas_of_date[j][3] = 1;
				}
			}
		}
	}
}
int createFile() //Создание БД с n-структурами Student;
{
	FILE* file; //указатель на файл
	if ((file = fopen(filename, "wb")) == NULL) //ошибка открытия файла 
	{
		cout << "Ошибка чтения файлов\n";
		return 1;
	}
	for (unsigned int i = 1; i <= n; ++i) //цикл по студентам
	{
		Student student;
		char l='r';
		cout << "Введите ФИО: \n";
		cin.get();
		cout << "* Введите фамилию: ";
		cin.getline(student.surname, 255);
		cout << "* Введите имя: ";
		cin.getline(student.name, 255);
		cout << "* Введите отчество: ";
		cin.getline(student.surname2, 255);
		cout << "Введите дату рождения: \n";
		student.date[0] = 0;
		student.date[1] = 0;
		while (!(student.date[0] && student.date[1]))
		{
			while (student.date[0] < 1 || student.date[0] > 31)
			{
				student.date[0] = getValue("* Введите день: ");
				if (student.date[0] < 1 || student.date[0] > 31)
					cout << "\nОшибка ввода, день не может иметь такое значение!\n\n";
			}
			while (student.date[1] < 1 || student.date[1] > 12)
			{
				student.date[1] = getValue("* Введите месяц: ");
				if (student.date[1] < 1 || student.date[1] > 12)
					cout << "\nОшибка ввода, месяц не может иметь такое значение!\n\n";
			}
			student.date[2] = getValue("* Введите год: ");
			if (student.date[2] < 24)
				student.date[2] += 2000;
			else if (student.date[2] < 101)
				student.date[2] += 1900;
			else if (student.date[2] < 1900)
			{
				while (student.date[2] < 1900 && (l != 'y') && student.date[2] > 100)
				{
					cout << "Подтвердите правильность ввода да/нет буквой (y/n)\n";
					cin >> l;
					if (l == 'n')
						student.date[2] = getValue("* Введите год: ");
				}
				if (student.date[2] < 24)
					student.date[2] += 2000;
				else if (student.date[2] < 101)
					student.date[2] += 1900;
			}
			else if (student.date[2] > 2023)
			{
				cout << "Год не может привышать 2023. Попробуйте снова!\n";
				student.date[2] = getValue("* Введите год: ");
			}
			if ((student.date[0] > 29 && student.date[1] == 2 && ((student.date[2]%4)==0)) || (student.date[0] > 28 && student.date[1] == 2 && ((student.date[2] % 4) != 0)) || (student.date[0] > 30 && student.date[1] % 2 == 0))
			{
				student.date[0] = 0;
				student.date[1] = 0;
				student.date[2] = 0;
				cout << "\nОшибка ввода, такая дата невозможна!\n\n";
			}
		}
		cout << "Введите адрес: ";
		cin.get();
		cin.getline(student.address, 255);
		student.rating = getValueF("Введите рейтинг: ");
		cout << "_______________________________________________________________\n";

		fwrite(&student, sizeof(Student), 1, file); //запись структуры
	}
	fclose(file); //закрываем файл
	return 0;
}
void outputFile() //вывод содержимого файла
{
	FILE* file;
	if ((file = fopen(filename, "rb")) == NULL)
	{
		cout << "Ошибка чтения файлов\n";
		return;
	}
	unsigned int count = 1;
	while (!feof(file) && count <= n)
	{
		Student student;
		fread(&student, sizeof(Student), 1, file);
		cout << "ФИО: " << student.surname << " " << student.name << " " << student.surname2 << endl;
		cout << "Дата рождения: ";
		if (student.date[0]/10==0)
			cout <<"0" << student.date[0] << ".";
		else
			cout << student.date[0] << ".";
		if (student.date[1] / 10 == 0)
			cout << "0" << student.date[1] << ".";
		else
			cout << student.date[1] << ".";
		cout << student.date[2] << " г. ";
		cout << "Адрес: " << student.address << endl;
		cout << "Рейтинг: ";
		cout << student.rating;
		cout << endl << "_______________________________________________________________\n" ;
		if (ferror(file)) {
			perror("Read error");
			break;
		}
		++count;
	}
	fclose(file);
	return;
} //вывод содержимого файла //
void deleteElemFile() 
{
	FILE* file1;
	FILE* file2;

	if (((file1 = fopen(filename, "rb")) == NULL) || ((file2 = fopen(filename_temp, "wb")) == NULL))
	{
		cout << "Ошибка чтения файлов\n";
		return;
	}
	int nums = n;
	int count = 0;
	while (!feof(file1) && (count + 1) <= nums)
	{
		Student student;
		fread(&student, sizeof(Student), 1, file1);
		mas_of_date[count] = new int[4];
		for (int j = 0; j < 3; j++)
			mas_of_date[count][j] = student.date[j];
		mas_of_date[count][3] = 0;
		++count;
	}
	fclose(file1);
	proverka_dat();
	count = 0;
	file1 = fopen(filename, "rb");
	while (!feof(file1) && (count + 1) <= nums)
	{
		Student student;
		fread(&student, sizeof(Student), 1, file1);
		if (mas_of_date[count][3] != 0)
		{
			--n;
		}
		else fwrite(&student, sizeof(Student), 1, file2);
		++count;
	}
	fclose(file1);
	fclose(file2);
	remove(filename);
	rename(filename_temp, filename);
	return;
}
void addElemFile() //добавление нового чел-ка после указанного
{
	FILE* file1;
	FILE* file2;
	if (((file1 = fopen(filename, "rb")) == NULL) || ((file2 = fopen(filename_temp, "wb")) == NULL))
	{
		cout << "Ошибка чтения файлов\n";
		return;
	}
	int count = 1;
	int num = n;
	while (!feof(file1) && count <= num)
	{
		Student student;
		fread(&student, sizeof(Student), 1, file1);
		if (!strcmp(next_surname, student.surname) && !zashita_ot_otsutstvia_familii)
		{
			fwrite(&student2, sizeof(Student), 1, file2);
			fwrite(&student, sizeof(Student), 1, file2);
			system("cls");
			n++;
			cout <<  "\n\nУченик добавлен! Количество учеников в базе - "<<n<<"\n\n";
			zashita_ot_otsutstvia_familii = 1;
		}
		else
		{
			fwrite(&student, sizeof(Student), 1, file2);
		}
		++count;
	}
	fclose(file1);
	fclose(file2);
	remove(filename);
	rename(filename_temp, filename);
}
int vvod_std2()
{
	char l = 't';
	cout << endl << "Введите нового ученика: \n";
	cout << "Введите ФИО: \n";
	cin.get();
	cout << "* Введите фамилию: ";
	cin.getline(student2.surname, 255);
	cout << "* Введите имя: ";
	cin.getline(student2.name, 255);
	cout << "* Введите отчество: ";
	cin.getline(student2.surname2, 255);
	cout << "Введите дату рождения: \n";
	student2.date[0] = 0;
	student2.date[1] = 0;
	while (!(student2.date[0] && student2.date[1]))
	{
		while (student2.date[0] < 1 || student2.date[0] > 31)
		{
			student2.date[0] = getValue("* Введите день: ");
			if (student2.date[0] < 1 || student2.date[0] > 31)
				cout << "\nОшибка ввода, день не может иметь такое значение!\n\n";
		}
		while (student2.date[1] < 1 || student2.date[1] > 12)
		{
			student2.date[1] = getValue("* Введите месяц: ");
			if (student2.date[1] < 1 || student2.date[1] > 12)
				cout << "\nОшибка ввода, месяц не может иметь такое значение!\n\n";
		}
		student2.date[2] = getValue("* Введите год: ");
		if (student2.date[2] < 24)
			student2.date[2] += 2000;
		else if (student2.date[2] < 101)
			student2.date[2] += 1900;
		else if (student2.date[2] < 1900)
		{
			while (student2.date[2] < 1900 && (l != 'y') && student2.date[2] > 100)
			{
				cout << "Подтвердите правильность ввода да/нет буквой (y/n)\n";
				cin >> l;
				if (l == 'n')
					student2.date[2] = getValue("* Введите год: ");
			}
			if (student2.date[2] < 24)
				student2.date[2] += 2000;
			else if (student2.date[2] < 101)
				student2.date[2] += 1900;
		}
		else if (student2.date[2] > 2023)
		{
			cout << "Год не может привышать 2023. Попробуйте снова!\n";
			student2.date[2] = getValue("* Введите год: ");
		}
		if ((student2.date[0] > 29 && student2.date[1] == 2 && ((student2.date[2] % 4) == 0)) || (student2.date[0] > 28 && student2.date[1] == 2 && ((student2.date[2] % 4) != 0)) || (student2.date[0] > 30 && student2.date[1] % 2 == 0))
		{
			student2.date[0] = 0;
			student2.date[1] = 0;
			student2.date[2] = 0;
			cout << "\nОшибка ввода, такая дата невозможна!\n\n";
		}
	}
	cout << "Введите адрес: ";
	cin.get();
	cin.getline(student2.address, 255);
	student2.rating = getValueF("Введите рейтинг: ");
	cout << "_______________________________________________________________\n";
	return 0;
}

void vvod_iz_faila()
{
	FILE* file1;
	FILE* file2;
	if (((file1 = fopen(filename, "rb")) == NULL) || ((file2 = fopen(filename_temp, "wb")) == NULL))
	{
		cout << "Ошибка чтения файла\n";
		return;
	}

	while (!feof(file1))
	{
		Student student;
		fread(&student, sizeof(Student), 1, file1);
		if (!feof(file1))
		{
			fwrite(&student, sizeof(Student), 1, file2);
			n++;
		}
	}
	fclose(file1);
	fclose(file2);
	remove(filename);
	rename(filename_temp, filename);
}

void ochistka()
{
	remove(filename);
}

void menu()
{
	int deistvie = 1;
	int vvod = 0;
	while (deistvie != 0)
	{
		cout << "\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n";
		cout << 1 << " - создение БД\n" << 2 << " - вывод БД\n" << 3 << " - удаление учеников с одинаковой датой рождения\n" << 4 << " - ввод данных ученика для добавления в БД\n" << 5 << " - добавление ученика в БД перед указанной фамилией\n" << 6 << " - чтение данных из файла\n"<< 7 <<" - удаление БД\n" << 0 << " - завершение работы программы\n \n";
		cout << "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n";
		cin >> deistvie;
		switch (deistvie)
		{
		case 1:
		{
			system("cls");
			n = getValue("Введите количествово учеников для создания базы данных: ");
			while (!n)
			{
				system("cls");
				cout << "\nОшибка ввода, количество учеников не может быть равным 0. Попробуйте снова!\n\n";
				n = getValue("Введите количествово учеников для создания базы данных: ");
			}
			createFile();
			system("cls");
			break;
		}
		case 2:
		{

			if (n == 0)
			{
				system("cls");
				cout << "База данных пуста.\n\n";
			}
			else
			{
				system("cls");
				cout << "Введённые ученики:\n\n";
				outputFile();
			}
			break;
		}
		case 3:
		{
			int w = n;
			if (n == 0)
			{
				system("cls");
				cout << "\nБаза данных пуста.\n\n";
			}
			else if (n > 1)
			{
				deleteElemFile();
				if (n < w)
				{
					system("cls");
					cout << "\n\nБыло удалено "<<w-n<<" учеников. Осталось - "<< n<<"\n\n";
				}
				else if (n == w)
				{
					system("cls");
					cout << "\nВсе ученики имеют уникальные даты рождения. Удаление не произведено!\n\n";
				}
				else
				{
					system("cls");
					cout << "\nВсе ученики удалены. База данных пуста!\n\n";
					remove(filename);
				}

			}
			else
			{
				system("cls");
				cout << "\nВведён один ученик, удаление невозможно\n";
			}
			break;
		}
		case 4:
		{
			system("cls");
			vvod_std2();
			system("cls");
			cout << "\n\nДанные сохранены, но не добавлены в базу данных\n\n";
			vvod = 1;
			break;
		}
		case 5:
		{
			system("cls");
			if (n > 0)
			{
				if (vvod == 1)
				{
					zashita_ot_otsutstvia_familii = 0;
					cout << "Введите фамилию, перед которой хотите ввести пользователя: ";
					cin.get();
					cin.getline(next_surname, 255);
					addElemFile();
					if (zashita_ot_otsutstvia_familii == 0)
					{
						system("cls");
						cout << "\nУченик с данной фамилией не найден, попробуйте выполнить операцию ещё раз с другой фамилией!\n\n";
					}
				}
				else
					cout << "\n\nВы ещё не введи данные ученика для добавления. Выберете сначала 4 пункт меню.\n\n";
			}
			else
			{
				system("cls");
				cout << "\n\nБаза данных пуста!\n\n";
			}
				
			break;
		}
		case 6:
		{
			n = 0;
			vvod_iz_faila();
			system("cls");
			if (n==0)
				cout << "\n\nУченики в базе не найдены!\n\n";
			else
				cout << "\n\nИз файла добавлено " << n << " учеников\n\n";
			break;
		}
		case 7:
		{
			ochistka();
			system("cls");
			cout << "\n\nБаза данных удалена!\n\n";
			break;
		}
		case 0:
			system("cls");
			cout << "\nСпасибо за выбор нашей программы!:)\n\n";
			system("pause");
			break;
		default:
			system("cls");
			cout << "\nВведено неверное значение, попробуйте ещё раз.\n\n";
			break;
		}
	}
}

int main()
{
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	setlocale(0, "");
	cout << "Привет, дорогой Друг. Это программа создана для работы с базой данных учеников. Расскажу тебе о своих возможностях.\n";
	cout << "Для выполнения нижеследующих действий тебе необходимо ввести соответствующую цифру\n";
	menu();
	for (int i = 0; i < n; i++)
		delete[] mas_of_date[i];
	delete[] mas_of_date;
	return 0;
}
